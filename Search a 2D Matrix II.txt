Write an efficient algorithm that searches for a value in an m x n matrix, return the occurrence of it.

This matrix has the following properties:

    * Integers in each row are sorted from left to right.

    * Integers in each column are sorted from up to bottom.

    * No duplicate integers in each row or column.

Example
Consider the following matrix:

[

    [1, 3, 5, 7],

    [2, 4, 7, 8],

    [3, 5, 9, 10]

]

Given target = 3, return 2.

Challenge Expand 
O(m+n) time and O(1) extra space


---------------------------------------

从矩阵最左下开始走， 要是target比他大就向右走，比他小就向上走


public class Solution {
    public int searchMatrix(ArrayList<ArrayList<Integer>> matrix, int target) {
        if (matrix == null || matrix.size() == 0 || matrix.get(0).size() == 0) {
            return 0;
        }
        int v = matrix.size() - 1;
        int j = 0;
        int count = 0;
        while ((v >= 0) && (j < matrix.get(0).size())) {
            if (matrix.get(v).get(j) == target) {
                count++;
                v--;
                //return j + 1;
            } else if (matrix.get(v).get(j) > target) {
                v--;
            } else if (matrix.get(v).get(j) < target) {
                j++;
            }
        }
        return count;
    }
}
