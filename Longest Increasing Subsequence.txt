Given a sequence of integers, find the longest increasing subsequence (LIS).

You code should return the length of the LIS.

Example
For [5, 4, 1, 2, 3], the LIS  is [1, 2, 3], return 3

For [4, 2, 4, 5, 3, 7], the LIS is [4, 4, 5, 7], return 4

Challenge Expand 
Time complexity O(n^2) or O(nlogn)

----------------------------------

O(n^2)的算法是 dp  


Lis[0] = 1
Lis[i] = max(lis[j]) for j < i && num[j] < num[i]


public class Solution {
    public int longestIncreasingSubsequence(int[] nums) {
        if (nums.length == 0 || nums == null) {
            return 0;
        }
        int[] lis = new int[nums.length];
        lis[0] = 1;
        int result = 1;
        for (int i = 1; i < nums.length; i++) {
            int max = 1;
            for (int j = i - 1; j >= 0; j--) {
                if (nums[j] <= nums[i]) {
                    max = Math.max(max, lis[j] + 1);
                }
            }
            lis[i] = max;
            result = Math.max(result, lis[i]);
        }
        return result;
    }
}

----------------------------------------------------


O（nlogn） 是贪心 

开一个栈，每次取栈顶元素top和读到的元素temp做比较，如果temp > top 则将temp入栈；如果temp < top则二分查找栈中的比temp大的第1个数，并用temp替换它。 最长序列长度即为栈的大小top。

这也是很好理解的，对于x和y，如果x < y且Stack[y] < Stack[x],用Stack[x]替换Stack[y]，此时的最长序列长度没有改变但序列Q的''潜力''增大了。

举例：原序列为1，5，8，3，6，7

栈为1，5，8，此时读到3，用3替换5，得到1，3，8； 再读6，用6替换8，得到1，3，6；再读7，得到最终栈为1，3，6，7。最长递增子序列为长度4。

注意 这个只能求得长度 而不一定最后存储的那个一定是最长子序列本身。另外这个题目其实求的是最长非递减子序列。

public class Solution {
    public int longestIncreasingSubsequence(int[] nums) {
        if (nums.length == 0 || nums == null) {
            return 0;
        }
        ArrayList<Integer> lis = new ArrayList<Integer>();
        lis.add(nums[0]);
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] >= lis.get(lis.size() - 1)) {
                lis.add(nums[i]);
            } else if (nums[i] < lis.get(lis.size() - 1)) {
                lis.set(firstBig(lis, nums[i]), nums[i]);
            }
        }
        return lis.size();
    }
    
    private int firstBig(ArrayList<Integer> lis, int target) {
        int start = 0;
        int end = lis.size() - 1;
        int mid;
        while (start < end) {
            mid = start + (end - start) / 2;
            if (target > lis.get(mid)) {
                start = mid + 1;
            } else if (target < lis.get(mid)){
                end = mid;
            } else {
                return mid;
            }
        }
        return end;
    }
}



